{
  "name": "refactor",
  "main": "./lib/refactor",
  "version": "0.9.2",
  "description": "Refactoring support",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hax/refactor.git"
  },
  "license": "MIT",
  "auther": {
    "name": "Daisuke Mino",
    "url": "http://dsk.mn"
  },
  "contributors": [
    {
      "name": "HE Shi-Jun",
      "email": "johnhax@gmail.com",
      "url": "hax"
    }
  ],
  "engines": {
    "atom": ">=1.0.0"
  },
  "scripts": {
    "test": "apm test"
  },
  "dependencies": {
    "debug": "^2.0.0",
    "eventemitter2": "^0.4.14",
    "semver": "^2.3.1"
  },
  "devDependencies": {
    "grunt": "^0.4",
    "grunt-este-watch": "^0.1",
    "grunt-notify": "^0.4"
  },
  "readme": "# Refactor Package\n\nLet's refactor code!\nWith this package, you can rename the name of variables and functions easily.\n\n![capture_rename](https://cloud.githubusercontent.com/assets/514164/2929354/b4e848d4-d788-11e3-99c2-620f406d5e6f.gif)\n\n## Language Support\n\nThis package works with these language plugins.\nYou can install using the preferences pane.\n\n* JavaScript: [js-refactor](https://atom.io/packages/js-refactor) [![Build Status](https://travis-ci.org/hax/js-refactor.svg?branch=master)](https://travis-ci.org/hax/js-refactor) with [ES6+ support](https://github.com/hax/js-refactor/issues/6)\n* CoffeeScript: [coffee-refactor](https://atom.io/packages/coffee-refactor)\n* [PHP](https://github.com/hax/refactor/issues/2)\n\n## Usage\n\n1. Set cursor to a symbol.\n2. Start renaming by using `ctrl-alt-r`.\n3. Type new name.\n4. Finish renaming by using `enter` or removing cursor from the focused symbol.\n\n## User Setting\n\n* Override [keymap](keymaps/refactor.cson) by using `Atom > Open Your Keymap`.\n\nFor example, you can override the shortcut to `ctrl-alt-e`\n```cson\n'atom-text-editor:not(.mini)':\n  'ctrl-alt-r': 'unset!'\n  'ctrl-alt-e': 'refactor:rename'\n```\n\n* Override [stylesheet](styles/refactor.less) by using `Atom > Open Your Stylesheet`.\n\n## API Documentation (for plugin developer)\n\n### package.json\n\nAdd `refactor` as `engines` in `package.json`.\n\n```\n{\n  ...\n  \"engines\": {\n    \"atom\": \">=1.0.0\",\n    \"refactor\": \">=0.6.0\"\n  },\n  ...\n}\n```\n\n### Interface\n\nYou should implement `Ripper` class in main module.\n\n* `Ripper.scopeNames []String` : **[Required]** Array of scope name, like 'source.coffee', 'source.js' and all that.\n* `Ripper#parse(code String, callback Function)` : **[Required]** Parse code, and you should callback when the parsing process is done. Callback specify the params as an array of error `Object`. The error `Object` should have params `range` and `message`.\n* `Ripper#find(point Point) []Range` : **[Required]** Return an array of found symbols' [`Range`](https://atom.io/docs/api/latest/api/classes/Range) at the passed [`Point`](https://atom.io/docs/api/latest/api/classes/Point).\n\n```coffeescript\n{ Range, Point } = require 'atom'\nclass Riper\n  @scopeNames: []\n  parse: (code, callback) ->\n    # parse code\n    callback [\n      range = new Range()\n      message: 'foo'\n    ]\n  find: (point) ->\n    # find references\n    [\n      new Range()\n      new Range()\n      ...\n      new Range()\n    ]\n```\n\n### Examples\n\n* [hax/js-refactor](https://github.com/hax/js-refactor)\n* [Ragg-/coffee-refactor](https://github.com/Ragg-/coffee-refactor)\n\n\n## See\n\n* [Changelog](CHANGELOG.md)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hax/refactor/issues"
  },
  "homepage": "https://github.com/hax/refactor#readme",
  "_id": "refactor@0.9.2",
  "_shasum": "d8327ef3020bbaa12bae180b61b0e2975df0b628",
  "_resolved": "file:../d-116715-28944-hcir6y/package.tgz",
  "_from": "../d-116715-28944-hcir6y/package.tgz",
  "_atomModuleCache": {
    "version": 1,
    "dependencies": [
      {
        "name": "debug",
        "version": "2.2.0",
        "path": "node_modules/debug/node.js"
      },
      {
        "name": "ms",
        "version": "0.7.1",
        "path": "node_modules/debug/node_modules/ms/index.js"
      },
      {
        "name": "eventemitter2",
        "version": "0.4.14",
        "path": "node_modules/eventemitter2/lib/eventemitter2.js"
      },
      {
        "name": "semver",
        "version": "2.3.2",
        "path": "node_modules/semver/semver.js"
      }
    ],
    "extensions": {
      ".coffee": [
        "Gruntfile.coffee",
        "lib/module_manager.coffee",
        "lib/refactor.coffee",
        "lib/watcher.coffee"
      ],
      ".json": [
        "node_modules/debug/bower.json",
        "node_modules/debug/component.json",
        "node_modules/debug/node_modules/ms/package.json",
        "node_modules/debug/package.json",
        "node_modules/eventemitter2/package.json",
        "node_modules/semver/package.json",
        "package.json"
      ],
      ".js": [
        "node_modules/debug/browser.js",
        "node_modules/debug/debug.js",
        "node_modules/debug/node.js",
        "node_modules/debug/node_modules/ms/index.js",
        "node_modules/eventemitter2/index.js",
        "node_modules/eventemitter2/lib/eventemitter2.js",
        "node_modules/semver/foot.js",
        "node_modules/semver/head.js",
        "node_modules/semver/semver.browser.js",
        "node_modules/semver/semver.js",
        "node_modules/semver/semver.min.js"
      ]
    },
    "folders": [
      {
        "paths": [
          "",
          "lib",
          "spec"
        ],
        "dependencies": {
          "debug": "^2.0.0",
          "eventemitter2": "^0.4.14",
          "semver": "^2.3.1"
        }
      },
      {
        "paths": [
          "node_modules/debug"
        ],
        "dependencies": {
          "ms": "0.7.1"
        }
      }
    ]
  }
}